options {
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)

package org.example.javacc;
import org.example.ast.*;import javax.swing.plaf.nimbus.State;

public class Parser {
}

PARSER_END(Parser)

/* Ignore Whitespace */
SKIP : {" " |  "\n" | "\r" | "\r\n" | "\t" }

/* Ignore Comments */
SKIP: {
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Punctuation */
TOKEN: {
  <LSQUIRLY: "{">
| <RSQUIRLY: "}">
| <LPAREN: "(" >
| <RPAREN: ")" >
| <LBRACKET: "[">
| <RBRACKET: "]" >
| <COMMA: ",">
| <SEMICOLON: ";">
| <DOT: ".">
}

/* Keywords */
TOKEN: {
  <CLASS: "class">
| <PUBLIC: "public">
| <STATIC: "static">
| <VOID: "void">
| <MAIN: "main">
| <EXTENDS: "extends">
| <RETURN: "return">
| <STRING: "String">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <THIS: "this">
| <NEW: "new">
| <LENGTH: "length">
| <SOUT: "System.out.println">
}

/* Types */
TOKEN: {
  <INT: "int">
| <INT_ARRAY: "int[]">
| <BOOLEAN: "boolean">
}

/* Literals */
TOKEN: {
  <TRUE_LITERAL: "true">
| <FALSE_LITERAL: "false">
| <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
| <IDENTIFIER: <LETTER>(<LETTER> | <DIGIT> | "_")* >
| <INTEGER_LITERAL:(<DIGIT>)+>
}

/* Operators */
TOKEN: {
  <EQ: "=">
| <AND: "&&">
| <LT: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
| <BANG: "!">
}

Program Program(): {
    MainClass mainClass;
    ClassDecl classDecl;
    ClassDeclList list = new ClassDeclList();
}
{
    mainClass = MainClass()
    (
        classDecl = ClassDecl()
        {list.addClassDecl(classDecl);}
    )*
    <EOF>
    {return new Program(mainClass, list);}
}

/* Entry Point */
MainClass MainClass(): {
    Identifier id;
    Identifier argsName;
    Statement stmt;
    StatementList stmts = new StatementList();
}
{
    <CLASS>
    id = Identifier()
    <LSQUIRLY> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET>
    argsName = Identifier()
    <RPAREN> <LSQUIRLY>
    stmt = Statement()
    {stmts.addStatement(stmt);}
    (
        stmt = Statement()
        {stmts.addStatement(stmt);}
    )*
    <RSQUIRLY> <RSQUIRLY>
    {return new MainClass(id, argsName, stmts);}
}

ClassDecl ClassDecl(): {
    ClassDecl classDecl;
}
{
    (
        LOOKAHEAD(<CLASS> Identifier() <EXTENDS>) classDecl = ClassExtendsDecl()
    |   classDecl = ClassDeclSimple()
    )
    {return classDecl;}
}

ClassDecl ClassDeclSimple(): {
    Identifier id;
    VarDecl var;
    VarDeclList vars = new VarDeclList();
    MethodDecl method;
    MethodDeclList methods = new MethodDeclList();
}
{
    <CLASS>
    id = Identifier()
    <LSQUIRLY>
    (
        var = VarDecl()
        {vars.addVarDecl(var);}
    )*
    (
        method = MethodDecl()
        {methods.addMethodDecl(method);}
    )*
    <RSQUIRLY>
    {return new ClassDeclSimple(id, vars, methods);}
}

ClassDecl ClassExtendsDecl(): {
    Identifier id;
    Identifier parent;
    VarDecl var;
    VarDeclList vars = new VarDeclList();
    MethodDecl method;
    MethodDeclList methods = new MethodDeclList();
}
{
    <CLASS>
    id = Identifier()
    <EXTENDS>
    parent = Identifier()
    <LSQUIRLY>
    (
        var = VarDecl()
        {vars.addVarDecl(var);}
    )*
    (
        method = MethodDecl()
        {methods.addMethodDecl(method);}
    )*
    <RSQUIRLY>
    {return new ClassDeclExtends(id, parent, vars, methods);}
}

Type Type(): {}
{
    <INT_ARRAY>
    {return new IntArrayType();}
|   <INT>
    {return new IntegerType();}
|   <BOOLEAN>
    {return new BooleanType();}
|   <IDENTIFIER>
    {return new IdentifierType(token.image);}
}

Formal Formal(): {
    Formal.FormalBuilder builder = Formal.builder();
    Type type;
}
{
    type = Type()
    {builder.type(type);}
    <IDENTIFIER>
    {builder.name(token.image);}
    {return builder.build();}
}

Formal FormalRest(): {}
{
    <COMMA>
    {return Formal();}
}

FormalList FormalList(): {
    Formal form;
    FormalList list = new FormalList();
}
{
    form = Formal()
    {list.addFormal(form);}
    (
        form = FormalRest()
        {list.addFormal(form);}
    )*
    {return list;}
}

VarDecl VarDecl(): {
    VarDecl.VarDeclBuilder builder = VarDecl.builder();
    Type type;
}
{
    type = Type()
    {builder.type(type);}
    <IDENTIFIER>
    {builder.name(token.image);}
    <SEMICOLON>
    {return builder.build();}
}

MethodDecl MethodDecl(): {
    Type returnType;
    String id;
    FormalList parameters = new FormalList();
    VarDecl var;
    VarDeclList vars = new VarDeclList();
    Statement stmt;
    StatementList stmts = new StatementList();
    Expression returnExpr;
}
{
    <PUBLIC>
    returnType = Type()
    <IDENTIFIER>
    {id = token.image;}
    <LPAREN>
    (parameters = FormalList())?
    <RPAREN>
    <LSQUIRLY>
    (LOOKAHEAD(2)
        var = VarDecl()
        {vars.addVarDecl(var);}
    )*
    (
        stmt = Statement()
        {stmts.addStatement(stmt);}
    )*
    <RETURN>
    returnExpr = Expression()
    <SEMICOLON> <RSQUIRLY>
    {return new MethodDecl(returnType, id, parameters, vars, stmts, returnExpr);}
}

Identifier Identifier(): {}
{
    <IDENTIFIER>
    {return new Identifier(token.image);}
}

Expression Expression(): {
    Expression lhe;
    Expression rhe;
}
{
    lhe = RelationalLevelPrecedence()
    (
        <AND>
        rhe = RelationalLevelPrecedence()
        {lhe = new And(lhe, rhe);}
    )*
    {return lhe;}
}

Expression RelationalLevelPrecedence(): {
    Expression lhe;
    Expression rhe;
}
{
    lhe = SumLevelPrecedence()
    (
        <LT>
        rhe = SumLevelPrecedence()
        {lhe = new LessThan(lhe, rhe);}
    )*
    {return lhe;}
}

Expression SumLevelPrecedence(): {
    Expression lhe;
    Expression rhe;
}
{
    lhe = ProductLevelPrecedence()
    (
        <PLUS>
        rhe = ProductLevelPrecedence()
        {lhe = new Plus(lhe, rhe);}
    |
        <MINUS>
        rhe = ProductLevelPrecedence()
        {lhe = new Minus(lhe, rhe);}
    )*
    {return lhe;}
}

Expression ProductLevelPrecedence(): {
    Expression lhe;
    Expression rhe;
}
{
    lhe = PrefixLevelPrecedence()
    (
        <STAR>
        rhe = PrefixLevelPrecedence()
        {lhe = new Times(lhe, rhe);}
    )*
    {return lhe;}
}

Expression PrefixLevelPrecedence(): {
    Expression expr;
}
{
    (
        <BANG>
        expr = CallLevelPrecedence()
        {expr = new Not(expr);}
    |
        expr = CallLevelPrecedence()
    )
    {return expr;}
}

Expression CallLevelPrecedence(): {
    Expression expr;
}
{
    (
        LOOKAHEAD(PrimaryExpression() <LBRACKET>)
        expr = Lookup()
    |
        LOOKAHEAD(PrimaryExpression() <DOT> <LENGTH>)
        expr = LengthMethod()
    |
        LOOKAHEAD(PrimaryExpression() <DOT> Identifier() <LPAREN>)
        expr = CallExpression()
    |
        expr = PrimaryExpression()
    )
    {return expr;}
}

Expression ExpressionRest(): {}
{
    <COMMA>
    {return Expression();}
}

ExpressionList ExpressionList(): {
    Expression expr;
    ExpressionList list = new ExpressionList();
}
{
    expr = Expression()
    {list.addExpression(expr);}
    (
        expr = ExpressionRest()
        {list.addExpression(expr);}
    )*
    {return list;}
}

ArrayLookup Lookup() :
{
    ArrayLookup.ArrayLookupBuilder builder = ArrayLookup.builder();
}
{
  {builder.array(PrimaryExpression());}
  <LBRACKET>
  {builder.idx(Expression());}
  <RBRACKET>
  {return builder.build();}
}

ArrayLength LengthMethod() :
{
    ArrayLength.ArrayLengthBuilder builder = ArrayLength.builder();
    Expression expr;
}
{
    expr = PrimaryExpression()
  {builder.array(expr);}
  <DOT> <LENGTH>
  {return builder.build();}
}

Call CallExpression() :
{
    Call.CallBuilder builder = Call.builder();
    ExpressionList list;
    Expression owner;
    Identifier method;
}
{
    owner = PrimaryExpression()
  {builder.owner(owner);}
  <DOT>
  method = Identifier()
  {builder.method(method);}
  <LPAREN>
  (
     list = ExpressionList()
     {builder.expressionList(list);}
  )?
  <RPAREN>
  {return builder.build();}
}

Expression PrimaryExpression(): {
    Expression expr;
}
{
    expr = IntegerLiteral()
    {return expr;}
|   expr = TrueLiteral()
    {return expr;}
|   expr = FalseLiteral()
    {return expr;}
|   expr = ThisLiteral()
    {return expr;}
|   expr = Identifier()
    {return expr;}
|   LOOKAHEAD(3) expr = NewArray()
    {return expr;}
|   expr = NewObject()
    {return expr;}
|   expr = ParenthesizedExpression()
    {return expr;}
}

IntegerLiteral IntegerLiteral(): {}
{
    <INTEGER_LITERAL>
    {return new IntegerLiteral(Integer.parseInt(token.image));}
}

True TrueLiteral(): {}
{
    <TRUE_LITERAL>
    {return new True();}
}

False FalseLiteral(): {}
{
    <FALSE_LITERAL>
    {return new False();}
}

This ThisLiteral(): {}
{
    <THIS>
    {return new This();}
}

NewObject NewObject(): {
    NewObject.NewObjectBuilder builder = NewObject.builder();
    Identifier id;
}
{
    <NEW>
    id = Identifier()
    {builder.identifier(id);}
    <LPAREN> <RPAREN>
    {return builder.build();}
}

Expression NewArray(): {
   NewArray.NewArrayBuilder builder = NewArray.builder();
   Expression size;
}
{
    <NEW> <INT> <LBRACKET>
    size = Expression()
    {builder.size(size);}
    <RBRACKET>
    {return builder.build();}
}

Expression ParenthesizedExpression(): {
    Expression expr;
}
{
    <LPAREN>
    expr = Expression()
    <RPAREN>
    {return expr;}
}

Statement BlockStatement(): {
    StatementList list = new StatementList();
    Statement stmt;
}
{
    <LSQUIRLY>
    (
       stmt = Statement()
       {list.addStatement(stmt);}
    )* <RSQUIRLY>
    {return new Block(list);}
}

Statement IfStatement(): {
    Expression condition;
    Statement consequence;
    Statement alternative;
}
{
    <IF> <LPAREN>
    condition = Expression()
    <RPAREN>
    consequence = Statement()
    <ELSE>
    alternative = Statement()
    {return new If(condition, consequence, alternative);}
}

Statement WhileStatement(): {
    Expression condition;
    Statement body;
}
{
    <WHILE> <LPAREN>
    condition = Expression()
    <RPAREN>
    body = Statement()
    {return new While(condition, body);}
}

Statement SoutStatement(): {
    Expression expr;
}
{
    <SOUT> <LPAREN>
    expr = Expression()
    <RPAREN> <SEMICOLON>
    {return new Sout(expr);}
}

Statement AssignStatement(): {
    Identifier id;
    Expression expr;
}
{
    id = Identifier()
    <EQ>
    expr = Expression()
    <SEMICOLON>
    {return new Assign(id, expr);}
}

Statement ArrayAssignStatement(): {
    Identifier id;
    Expression idx;
    Expression expr;
}
{
    id = Identifier()
    <LBRACKET>
    idx = Expression()
    <RBRACKET> <EQ>
    expr = Expression()
    <SEMICOLON>
    {return new ArrayAssign(id, idx, expr);}
}

Statement Statement(): {
    Statement stmt;
}
{
    (
        stmt = BlockStatement()
    |   stmt = IfStatement()
    |   stmt = WhileStatement()
    |   stmt = SoutStatement()
    |   LOOKAHEAD(2) stmt = AssignStatement()
    |   LOOKAHEAD(2) stmt = ArrayAssignStatement()
    )
    {return stmt;}
}